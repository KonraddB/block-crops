{"ast":null,"code":"var _jsxFileName = \"/Users/wcomputer/codeProjects/react-content-script/src/Canvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = () => {\n  _s();\n\n  const canvasRef = React.useRef(null);\n  const [context, setContext] = React.useState(null);\n  React.useEffect(() => {\n    let mouseDown = false;\n    let start = {\n      x: 0,\n      y: 0\n    };\n    let end = {\n      x: 0,\n      y: 0\n    };\n    let canvasOffsetLeft = 0;\n    let canvasOffsetTop = 0;\n\n    function handleMouseDown(evt) {\n      mouseDown = true;\n      start = {\n        x: evt.clientX - canvasOffsetLeft,\n        y: evt.clientY - canvasOffsetTop\n      };\n      end = {\n        x: evt.clientX - canvasOffsetLeft,\n        y: evt.clientY - canvasOffsetTop\n      };\n    }\n\n    function handleMouseUp(evt) {\n      mouseDown = false;\n    }\n\n    function handleMouseMove(evt) {\n      if (mouseDown && context) {\n        start = {\n          x: end.x,\n          y: end.y\n        };\n        end = {\n          x: evt.clientX - canvasOffsetLeft,\n          y: evt.clientY - canvasOffsetTop\n        }; // Draw our path\n\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.strokeStyle = `#${randomColor()}`;\n        context.lineWidth = 3;\n        context.stroke();\n        context.closePath();\n      }\n    }\n\n    function randomColor() {\n      const color = new Array(6);\n\n      for (let i = 0; i < 6; i++) {\n        const val = Math.floor(Math.random() * 16);\n\n        if (val < 10) {\n          color[i] = val.toString();\n        } else {\n          color[i] = String.fromCharCode(val + 87);\n        }\n      }\n\n      return color.join(\"\");\n    }\n\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        canvasRef.current.addEventListener(\"mousedown\", handleMouseDown);\n        canvasRef.current.addEventListener(\"mouseup\", handleMouseUp);\n        canvasRef.current.addEventListener(\"mousemove\", handleMouseMove);\n        canvasOffsetLeft = canvasRef.current.offsetLeft;\n        canvasOffsetTop = canvasRef.current.offsetTop;\n        setContext(renderCtx);\n      }\n    } // Draw a rectangle\n\n\n    if (context) context.fillRect(5, 5, 100, 100); // Draw a circle\n\n    if (context) {\n      context.beginPath();\n      context.fillStyle = \"#ff7f50\";\n      context.arc(440, 60, 50, 0, Math.PI * 2, true);\n      context.fill();\n      context.fillStyle = \"#000\";\n      context.closePath();\n    }\n\n    return function cleanup() {\n      if (canvasRef.current) {\n        canvasRef.current.removeEventListener(\"mousedown\", handleMouseDown);\n        canvasRef.current.removeEventListener(\"mouseup\", handleMouseUp);\n        canvasRef.current.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n    };\n  }, [context]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      ref: canvasRef,\n      width: 500,\n      height: 500,\n      style: {\n        border: \"2px solid #000\",\n        marginTop: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Canvas, \"OEcAy4U+qjwqiVBm9tpBGr42fdU=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/wcomputer/codeProjects/react-content-script/src/Canvas.tsx"],"names":["React","Canvas","canvasRef","useRef","context","setContext","useState","useEffect","mouseDown","start","x","y","end","canvasOffsetLeft","canvasOffsetTop","handleMouseDown","evt","clientX","clientY","handleMouseUp","handleMouseMove","beginPath","moveTo","lineTo","strokeStyle","randomColor","lineWidth","stroke","closePath","color","Array","i","val","Math","floor","random","toString","String","fromCharCode","join","current","renderCtx","getContext","addEventListener","offsetLeft","offsetTop","fillRect","fillStyle","arc","PI","fill","cleanup","removeEventListener","textAlign","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\ntype Coordinates = {\n  x: number;\n  y: number;\n};\n\nconst Canvas = () => {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(\n    null\n  );\n\n  React.useEffect(() => {\n    let mouseDown: boolean = false;\n    let start: Coordinates = { x: 0, y: 0 };\n    let end: Coordinates = { x: 0, y: 0 };\n    let canvasOffsetLeft: number = 0;\n    let canvasOffsetTop: number = 0;\n\n    function handleMouseDown(evt: MouseEvent) {\n      mouseDown = true;\n\n      start = {\n        x: evt.clientX - canvasOffsetLeft,\n        y: evt.clientY - canvasOffsetTop,\n      };\n\n      end = {\n        x: evt.clientX - canvasOffsetLeft,\n        y: evt.clientY - canvasOffsetTop,\n      };\n    }\n\n    function handleMouseUp(evt: MouseEvent) {\n      mouseDown = false;\n    }\n\n    function handleMouseMove(evt: MouseEvent) {\n      if (mouseDown && context) {\n        start = {\n          x: end.x,\n          y: end.y,\n        };\n\n        end = {\n          x: evt.clientX - canvasOffsetLeft,\n          y: evt.clientY - canvasOffsetTop,\n        };\n\n        // Draw our path\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.strokeStyle = `#${randomColor()}`;\n        context.lineWidth = 3;\n        context.stroke();\n        context.closePath();\n      }\n    }\n\n    function randomColor(): string {\n      const color = new Array<string>(6);\n\n      for (let i = 0; i < 6; i++) {\n        const val = Math.floor(Math.random() * 16);\n\n        if (val < 10) {\n          color[i] = val.toString();\n        } else {\n          color[i] = String.fromCharCode(val + 87);\n        }\n      }\n\n      return color.join(\"\");\n    }\n\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        canvasRef.current.addEventListener(\"mousedown\", handleMouseDown);\n        canvasRef.current.addEventListener(\"mouseup\", handleMouseUp);\n        canvasRef.current.addEventListener(\"mousemove\", handleMouseMove);\n\n        canvasOffsetLeft = canvasRef.current.offsetLeft;\n        canvasOffsetTop = canvasRef.current.offsetTop;\n\n        setContext(renderCtx);\n      }\n    }\n\n    // Draw a rectangle\n    if (context) context.fillRect(5, 5, 100, 100);\n\n    // Draw a circle\n    if (context) {\n      context.beginPath();\n      context.fillStyle = \"#ff7f50\";\n      context.arc(440, 60, 50, 0, Math.PI * 2, true);\n      context.fill();\n      context.fillStyle = \"#000\";\n      context.closePath();\n    }\n\n    return function cleanup() {\n      if (canvasRef.current) {\n        canvasRef.current.removeEventListener(\"mousedown\", handleMouseDown);\n        canvasRef.current.removeEventListener(\"mouseup\", handleMouseUp);\n        canvasRef.current.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n    };\n  }, [context]);\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      <canvas\n        id=\"canvas\"\n        ref={canvasRef}\n        width={500}\n        height={500}\n        style={{\n          border: \"2px solid #000\",\n          marginTop: 10,\n        }}\n      ></canvas>\n    </div>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}